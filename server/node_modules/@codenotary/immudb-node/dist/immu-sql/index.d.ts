/// <reference types="node" />
import type * as immu from "../types/index.js";
export declare type SqlValueType = "string" | "boolean" | "int" | "timestamp";
/**
 * Decodes bytes to js types.
 */
export declare const decodeSqlValue: SqlDecoder;
/**
 * Decodes bytes to js types.
 */
export declare type SqlDecoder = {
    /** Int64BE. */
    int: (b: Buffer) => number;
    /** Boolean. */
    boolean: (b: Buffer) => boolean;
    /** Utf8 bytes. */
    string: (b: Buffer) => string;
    /** Int64BE timestamp with micro-seconds precision. */
    timestamp: (b: Buffer) => Date;
};
/**
 *
 * @example
 *
 * ```ts
 * const mapTestTableRow = createSqlMap({
 *     id1:        {type: 'int',       id: 0},
 *     id2:        {type: 'string',    id: 1},
 *     created:    {type: 'timestamp', id: 2},
 *     data:       {type: 'string',    id: 3},
 *     isActive:   {type: 'boolean',   id: 4},
 * })
 *
 * ```
 */
export declare function createSqlMap<T extends {
    [key in string]: {
        type: SqlValueType;
        id: number;
    };
}>(def: T): (data: immu.SqlRowColumn[]) => { [key in keyof T]: ReturnType<SqlDecoder[T[key]["type"]]>; };
//# sourceMappingURL=index.d.ts.map