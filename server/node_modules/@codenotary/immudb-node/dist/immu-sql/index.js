import Long from "long";
/**
 * Decodes bytes to js types.
 */
export const decodeSqlValue = {
    /** Int64BE */
    int: (b) => {
        return Long.fromBytesBE([...b], false).toNumber();
    },
    /** Boolean (1 byte, value of `0` is `false` everything else `true`) */
    boolean: (b) => {
        return b[0] === 0 ? false : true;
    },
    /** Utf8 bytes. */
    string: (b) => {
        return b.toString('utf8');
    },
    /** Int64BE timestamp with micro-seconds precision. */
    timestamp: (b) => {
        return new Date(Long.fromBytesBE([...b], false).toNumber() / 1000);
    }
};
/**
 *
 * @example
 *
 * ```ts
 * const mapTestTableRow = createSqlMap({
 *     id1:        {type: 'int',       id: 0},
 *     id2:        {type: 'string',    id: 1},
 *     created:    {type: 'timestamp', id: 2},
 *     data:       {type: 'string',    id: 3},
 *     isActive:   {type: 'boolean',   id: 4},
 * })
 *
 * ```
 */
export function createSqlMap(def) {
    return function mapSql(data) {
        const res = {};
        const keys = Object.keys(def);
        for (const key of keys) {
            const { id, type } = def[key];
            const decoded = decodeSqlValue[type](data[id].bin);
            res[key] = decoded;
        }
        return res;
    };
}
//# sourceMappingURL=index.js.map