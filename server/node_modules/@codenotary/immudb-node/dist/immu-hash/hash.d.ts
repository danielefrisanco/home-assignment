/// <reference types="node" />
export declare function createGenerator(): (data: Buffer) => Buffer;
export declare function data(props: Buffer): Buffer;
export declare function node(props: {
    left: Buffer;
    right: Buffer;
}): Buffer;
export declare function leaf(props: Buffer): Buffer;
/**
 * Computes sha256 hash from list of buffers
 * (using streams internally).
 *
 * Example:
 *
 * ```js
 *
 * const buffers = [
 *   Buffer.of(0),
 *   Buffer.from([1,2,3])
 * ]
 * const hashValue = fromBuffers(buffers)
 * console.log('Hash value', hashValue)
 * //
 *
 * ```
 *
 * @see https://nodejs.org/api/crypto.html#class-hash
 *
 */
export declare function fromBuffers(buffers: Buffer[]): Buffer;
export declare type BufferTree = Buffer | BufferTree[];
/**
 *
 * Example usage:
 *
 * ```ts
 *
 * fromTreeBuffers([
 *     Buffer.of(0),
 *     [
 *         Buffer.of(0),
 *         Buffer.of(0),
 *         [
 *             Buffer.of(0)
 *         ],
 *         []
 *     ]
 * ])
 *
 * ```
 */
export declare function fromTreeBuffers(buffers: BufferTree[]): Buffer;
export declare function ofTreeBuffers(...buffers: BufferTree[]): Buffer;
/**
 * Computes sha256 hash from list of buffers
 * (using streams internally).
 *
 * Example:
 *
 * ```js
 *
 * // compute hash
 * const hashOfBufs = ofBuffers(
 *   Buffer.of(0),
 *   Buffer.from([1,2,3])
 * )
 *
 * console.log('Hash value', hashOfBufs)
 * //
 *
 * ```
 *
 * @see https://2ality.com/2019/11/nodejs-streams-async-iteration.html
 *
 */
export declare function ofBuffers(...buffers: Buffer[]): Buffer;
/**
 * Computes sha256 hash from iterable of buffers
 * (using streams internally).
 *
 * Example:
 *
 * ```js
 *
 * // iterator generator
 * function* createBuffers() {
 *   yield Buffer.of(0)
 *   yield Buffer.from([1,2,3])
 * }
 *
 * // compute hash
 * const hashOfBufs1 = fromIterableBuffers(createBuffers())
 * console.log('Hash value 1', hashOfBufs1)
 *
 * // any iterator will do:
 * const buffers = [
 *   Buffer.of(0),
 *   Buffer.from([1,2,3])
 * ]
 *
 * // compute hash
 * const hashOfBufs2 = fromIterableBuffers(buffers)
 * console.log('Hash value 2', hashOfBufs2)
 *
 * // same result
 * console.log('Same hashes', hashOfBufs1.equals(hashOfBufs2))
 * //
 *
 * ```
 *
 * @see https://nodejs.org/api/crypto.html#class-hash
 * @see https://2ality.com/2019/11/nodejs-streams-async-iteration.html
 *
 */
export declare function fromIterableBuffers(buffers: Iterable<Buffer>): Buffer;
//# sourceMappingURL=hash.d.ts.map