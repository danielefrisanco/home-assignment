/// <reference types="node" />
import type * as immu from '../types/index.js';
/**
 * Hashes sql row entry. Schema is sha256 of:
 * - `metadataLength` - length of binary encoded metadata - UInt16BE,
 * - `meta` - metadata - bytes,
 * - `keyLength` - UInt16BE,
 * - `key`:
 *   - `prefixSql` - `0x02` - byte,
 *   - `prefixSqlRow` - `R.` - utf8 encoded string bytes,
 *   - `dbId` - id of database - UInt32BE,
 *   - `tableId` - id of table - UInt32BE,
 *   - `pkIndexId` - `0` - UInt32BE,
 *   - `pk` - primary key - bytes,
 * - sha256 of:
 *   - `columnsCount` - count of row columns - UInt32BE,
 *   - `value[]`:
 *     - `columnId` - id of column - UInt32BE,
 *     - `columnValLength` - byte length of column value - UInt32BE,
 *     - `columnValue` - value of column - bytes
 */
export declare function hashOfSqlRowEntry(props: immu.SqlRowEntry): Buffer;
/**
 * Hashes sql column entry. Schema is sha256 of:
 * - `metadataLength` - length of binary encoded metadata - UInt16BE,
 * - `meta` - metadata - bytes,
 * - `keyLength` - UInt16BE,
 * - `Key`:
 *   - `prefixSql` - `0x02` - byte,
 *   - `prefixSqlColumn` - `CTL.COLUMN` - utf8 encoded string - bytes,
 *   - `dbId` - id of database - UInt32BE,
 *   - `tableId` - id of table - UInt32BE,
 *   - `columnTypeLength` - length of `columnType` - UInt32BE,
 *   - `columnType` - utf8 encoded string of column type - bytes,
 * - sha256 of:
 *   - `value`:
 *     - `columnAttribute` - `0b00000001` bit set if column nullable, and
 *       `0b00000010` bit set if column autoincrement - byte,
 *     - `columnMaxLength` - byte length columnName - UInt32BE,
 *     - `columnName` - utf8 encoded string of column name - bytes
 */
export declare function hashOfSqlColumnEntry(props: immu.SqlColumnEntry): Buffer;
/**
 * Hashes sql table entry. Schema is sha256 of:
 * - `metadataLength` - length of binary encoded metadata - UInt16BE,
 * - `meta` - metadata - bytes,
 * - `keyLength` - UInt16BE,
 * - `Key`:
 *   - `prefixSql` - `0x02` - byte,
 *   - `prefixSqlIndex` - `CTL.INDEX` - utf8 encoded string - bytes,
 *   - `dbId` - id of database - UInt32BE,
 *   - `tableId` - id of table - UInt32BE,
 *   - `indexId` - id of index - UInt32BE,
 * - sha256 of:
 *   - `value`:
 *     - `indexIsPrimary`: byte,
 *     - `columns[]`:
 *       - columnId - id of indexed column - UInt32BE
 *       - columnAscDesc - sort order of indexed column - byte
 */
export declare function hashOfSqlIndexEntry(props: immu.SqlIndexEntry): Buffer;
/**
 * Hashes sql table entry. Schema is sha256 of:
 * - `metadataLength` - length of binary encoded metadata - UInt16BE,
 * - `meta` - metadata - bytes,
 * - `keyLength` - UInt16BE,
 * - `Key`:
 *   - `prefixSql` - `0x02` - byte,
 *   - `prefixSqlTable` - `CTL.TABLE` - utf8 encoded string - bytes,
 *   - `dbId` - id of database - UInt32BE,
 *   - `tableId` - id of table - UInt32BE,
 * - sha256 of:
 *   - `value` - utf8 encoded string of table name - bytes
 */
export declare function hashOfSqlTableEntry(props: immu.SqlTableEntry): Buffer;
/**
 * Hashes sql database entry. Schema is sha256 of:
 * - `metadataLength` - length of binary encoded metadata - UInt16BE,
 * - `meta` - metadata - bytes,
 * - `keyLength` - UInt16BE,
 * - `Key`:
 *   - `prefixSql` - `0x02` - byte,
 *   - `prefixSqlDb` - `CTL.DATABASE` - utf8 encoded string - bytes,
 *   - `dbId` - id of database - UInt32BE,
 * - sha256 of:
 *   - `value` - utf8 encoded string of database name - bytes
 */
export declare function hashOfSqlDbEntry(props: immu.SqlDbEntry): Buffer;
//# sourceMappingURL=sqlEntry.d.ts.map