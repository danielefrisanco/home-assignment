/// <reference types="node" />
import Long from 'long';
/**
 * Computes source and target Merkel Hash trees roots
 * using data of the proof. This function implements
 * client side consistency check alghoritm.
 * @export
 * @return computed roots
 */
export declare function rootsFromConsistencyProof(proofData: {
    /**
     * List of nodes needed to compute source and target Merkle Tree hashes.
     * Proof nodes have four parts:
     * - first node is last leaf of source Merkle Tree, used for computation
     *   of both source and target Merkle Trees roots,
     * - next is 0 or 1 node from target Merkle Tree joined on the right used for
     *   computing target Merkle Tree,
     * - next are nodes from both Merkle Trees (at least 1 when source and
     *   target are not the same) joined on the left used for computing source and
     *   target Merkle Tree,
     * - next are 0 or moore nodes from target Merkle Tree joined on the right when
     *   computing target Merkle Tree.
     */
    proofNodes: Buffer[];
    /**
     * Size (number of leafs) of the source Merkle Tree.
     * Number is encoded as UInt64, unsigned integer with 64 bits,
     * and represented by type Long in js. In immudb sourceSize
     * is equal to last transaction number.
     */
    sourceSize: Long;
    /**
     * Size (number of leafs) of the target Merkle Tree.
     * Number is encoded as UInt64, unsigned integer with 64 bits,
     * and represented by type Long in js. In immudb targetSize
     * is equal to last transaction number.
     */
    targetSize: Long;
}): {
    /**
     * Source Merkle Tree root
     * (by default as SHA256)
     */
    sourceRoot: Buffer;
    /**
     * Target Merkle Tree root
     * (by default as SHA256)
     */
    targetRoot: Buffer;
};
//# sourceMappingURL=consistencyProof.d.ts.map