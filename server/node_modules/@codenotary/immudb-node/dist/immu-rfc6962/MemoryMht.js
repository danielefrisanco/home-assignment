import * as memoryMhtApi from "./memoryMhtApi.js";
/**
 * Stores (small) Merkle Hash Tree in memory,
 * provide convinient methods for tree examination,
 * navigation and can produce inclusion proof for
 * any of its leafs.
 *
 */
export class MemoryMht {
    /**
     * Constructs full MHT tree from list of values.
     *
     * Tree is build as fallows:
     * - Leafs are created hashing concatence of leaf prefix `0x00` and value.
     * - Nodes are created by hashing concatence of node prefix `0x01`, left
     *   subtree, right subtree.
     *
     * Tree supports matrix like indexing, and ability to generate inclusion
     * proofs.
     */
    constructor(values) {
        this.tree = memoryMhtApi.createFromValues(values);
    }
    getRoot() {
        return memoryMhtApi.getRoot(this.tree);
    }
    width() {
        return memoryMhtApi.getWidth(this.tree);
    }
    hight() {
        return memoryMhtApi.getHight(this.tree);
    }
    levelWidth(levelIndex) {
        return memoryMhtApi.getLevelWidht(this.tree, levelIndex);
    }
    getNode(levelIndex, index) {
        return memoryMhtApi.getNode(this.tree, levelIndex, index);
    }
    getLeaf(index) {
        return memoryMhtApi.getLeaf(this.tree, index);
    }
    getParentNodeIndex(levelIndex, index) {
        return memoryMhtApi.getParentNodeIndex(this.tree, levelIndex, index);
    }
    generateInclusionProofFor(leafIndex) {
        return memoryMhtApi.generateInclusionProofDataFor({
            leafIndex,
            usingMerkleTree: this.tree,
        });
    }
}
//# sourceMappingURL=MemoryMht.js.map