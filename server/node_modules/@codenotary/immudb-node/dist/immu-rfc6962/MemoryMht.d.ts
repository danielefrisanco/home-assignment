/// <reference types="node" />
import * as memoryMhtApi from "./memoryMhtApi.js";
/**
 * Stores (small) Merkle Hash Tree in memory,
 * provide convinient methods for tree examination,
 * navigation and can produce inclusion proof for
 * any of its leafs.
 *
 */
export declare class MemoryMht {
    readonly tree: memoryMhtApi.MerkleTreeData;
    /**
     * Constructs full MHT tree from list of values.
     *
     * Tree is build as fallows:
     * - Leafs are created hashing concatence of leaf prefix `0x00` and value.
     * - Nodes are created by hashing concatence of node prefix `0x01`, left
     *   subtree, right subtree.
     *
     * Tree supports matrix like indexing, and ability to generate inclusion
     * proofs.
     */
    constructor(values: Buffer[]);
    getRoot(): Buffer;
    width(): number;
    hight(): number;
    levelWidth(levelIndex: number): number;
    getNode(levelIndex: number, index: number): Buffer;
    getLeaf(index: number): Buffer;
    getParentNodeIndex(levelIndex: number, index: number): number;
    generateInclusionProofFor(leafIndex: number): Buffer[];
}
//# sourceMappingURL=MemoryMht.d.ts.map