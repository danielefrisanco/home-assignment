/// <reference types="node" />
import Long from 'long';
/**
 * Computes last block (transactionId, previousBlock, dataHash) hash
 * from previous block hash and data hashes
 *
 * @throws {@link RangeError} when sourceTxId is less than zero
 * @throws {@link RangeError} when proofData is empty
 *
 * @returns Block hash and its transaction id
 */
export declare function blockFromLinearProof(props: {
    /**
     * Array of hashes, first element is hash of previous
     * block, rest are hashes of data.
     */
    proofData: Buffer[];
    /**
     * Transaction id of previous block (UInt64)
     */
    sourceTxId: Long;
}): {
    /**
     * hash of computed block
     */
    blockHash: Buffer;
    /**
     * transaction id of computed block
     */
    txId: Long;
};
export declare function blockFromPreviousBlock(props: {
    previousBlockHash: Buffer;
    currentMhtHash: Buffer;
    currentId: Long;
}): Buffer;
//# sourceMappingURL=linearProof.d.ts.map