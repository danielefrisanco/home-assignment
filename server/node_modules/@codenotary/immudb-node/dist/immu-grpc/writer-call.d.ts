import type * as igrpc from '@codenotary/immudb-node-grpcjs';
export declare function createStreamSet(client: igrpc.ImmuServiceClient): (props: {
    request: AsyncIterable<igrpc.Chunk>;
    credentials?: import("@grpc/grpc-js").CallCredentials | undefined;
    requestMetadata?: import("@grpc/grpc-js").Metadata | undefined;
    operationTimeoutMS?: number | undefined;
    cancelSignal?: AbortSignal | undefined;
}) => Promise<{
    res?: igrpc.TxHeader__Output | undefined;
    info?: any[] | undefined;
}>;
export declare function createStreamExecAll(client: igrpc.ImmuServiceClient): (props: {
    request: AsyncIterable<igrpc.Chunk>;
    credentials?: import("@grpc/grpc-js").CallCredentials | undefined;
    requestMetadata?: import("@grpc/grpc-js").Metadata | undefined;
    operationTimeoutMS?: number | undefined;
    cancelSignal?: AbortSignal | undefined;
}) => Promise<{
    res?: igrpc.TxHeader__Output | undefined;
    info?: any[] | undefined;
}>;
export declare function createStreamVerifiableSet(client: igrpc.ImmuServiceClient): (props: {
    request: AsyncIterable<igrpc.Chunk>;
    credentials?: import("@grpc/grpc-js").CallCredentials | undefined;
    requestMetadata?: import("@grpc/grpc-js").Metadata | undefined;
    operationTimeoutMS?: number | undefined;
    cancelSignal?: AbortSignal | undefined;
}) => Promise<{
    res?: igrpc.VerifiableTx__Output | undefined;
    info?: any[] | undefined;
}>;
export declare function createReplicateTx(client: igrpc.ImmuServiceClient): (props: {
    request: AsyncIterable<igrpc.Chunk>;
    credentials?: import("@grpc/grpc-js").CallCredentials | undefined;
    requestMetadata?: import("@grpc/grpc-js").Metadata | undefined;
    operationTimeoutMS?: number | undefined;
    cancelSignal?: AbortSignal | undefined;
}) => Promise<{
    res?: igrpc.TxHeader__Output | undefined;
    info?: any[] | undefined;
}>;
//# sourceMappingURL=writer-call.d.ts.map