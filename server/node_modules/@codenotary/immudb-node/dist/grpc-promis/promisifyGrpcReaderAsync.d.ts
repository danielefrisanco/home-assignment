import * as grpc from '@grpc/grpc-js';
export declare function promisifyGrpcReaderAsync<TRequest, TResponse>(callFunction: (request: TRequest, metadata: grpc.Metadata, options: grpc.CallOptions) => grpc.ClientReadableStream<TResponse>): (props: {
    request: TRequest;
    credentials?: grpc.CallCredentials;
    requestMetadata?: grpc.Metadata;
    operationTimeoutMS?: number;
    cancelSignal?: AbortSignal;
}) => AsyncGenerator<Awaited<TResponse>, any[], unknown>;
export declare function promisifyGrpcReaderAsyncOnData<TRequest, TResponse>(callFunction: (request: TRequest, metadata: grpc.Metadata, options: grpc.CallOptions) => grpc.ClientReadableStream<TResponse>): (props: {
    request: TRequest;
    credentials?: grpc.CallCredentials;
    requestMetadata?: grpc.Metadata;
    operationTimeoutMS?: number;
    cancelSignal?: AbortSignal;
}) => AsyncGenerator<Awaited<TResponse>, any[], unknown>;
export declare function promisifyGrpcReaderAsyncOnReadable<TRequest, TResponse>(callFunction: (request: TRequest, metadata: grpc.Metadata, options: grpc.CallOptions) => grpc.ClientReadableStream<TResponse>): (props: {
    request: TRequest;
    credentials?: grpc.CallCredentials;
    requestMetadata?: grpc.Metadata;
    operationTimeoutMS?: number;
    cancelSignal?: AbortSignal;
}) => AsyncGenerator<Awaited<NonNullable<TResponse>>, any[] | undefined, unknown>;
export declare function simplePromisifyGrpcReaderOnReadable<TRequest, TResponse>(callFunction: (request: TRequest, metadata: grpc.Metadata, options: grpc.CallOptions) => grpc.ClientReadableStream<TResponse>): (props: {
    request: TRequest;
    credentials?: grpc.CallCredentials;
    requestMetadata?: grpc.Metadata;
    operationTimeoutMS?: number;
    cancelSignal?: AbortSignal;
}) => Promise<unknown>;
export declare function simplePromisifyGrpcReaderOnData<TRequest, TResponse>(callFunction: (request: TRequest, metadata: grpc.Metadata, options: grpc.CallOptions) => grpc.ClientReadableStream<TResponse>): (props: {
    request: TRequest;
    credentials?: grpc.CallCredentials;
    requestMetadata?: grpc.Metadata;
    operationTimeoutMS?: number;
    cancelSignal?: AbortSignal;
}) => Promise<unknown>;
//# sourceMappingURL=promisifyGrpcReaderAsync.d.ts.map