import * as grpcjs from '@grpc/grpc-js';
import type { GrpcCallMetaAndOpts } from '../types/GrpcCallMetaAndOpts.js';
export declare function basicPromisifyGrpcCall<TRequest, TResponse>(callFunction: (request: TRequest, metadata: grpcjs.Metadata, options: grpcjs.CallOptions, callback: grpcjs.requestCallback<TResponse>) => grpcjs.Call): (arg1: TRequest, arg2: grpcjs.Metadata, arg3: grpcjs.CallOptions) => Promise<TResponse | undefined>;
export declare function promisifyGrpcCall<TRequest, TResponse>(callFunction: (request: TRequest, metadata: grpcjs.Metadata, options: grpcjs.CallOptions, callback: grpcjs.requestCallback<TResponse>) => grpcjs.Call): (props: GrpcCallMetaAndOpts & {
    request: TRequest;
}) => Promise<TResponse | undefined>;
export declare function fullPromisifyGrpcCall<TRequest, TResponse>(callFunction: (request: TRequest, metadata: grpcjs.Metadata, options: grpcjs.CallOptions, callback: grpcjs.requestCallback<TResponse>) => grpcjs.Call): (props: {
    request: TRequest;
    credentials?: grpcjs.CallCredentials;
    requestMetadata?: grpcjs.Metadata;
    operationTimeoutMS?: number;
    cancelSignal?: AbortSignal;
}) => Promise<{
    response?: TResponse | undefined;
    info: any[];
}>;
//# sourceMappingURL=promisifyGrpcCall.d.ts.map