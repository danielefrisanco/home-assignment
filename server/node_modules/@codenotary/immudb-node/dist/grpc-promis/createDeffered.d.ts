/**
 * Creates promise that can be resolved/rejected externally.
 *
 * ```ts
 *
 * const run = async () => {
 *     const resultOfCallback = createDeffered<number>()
 *     readNumberOfLines({
 *         filename: 'some_file.md',
 *         callback: (err, buf) => {
 *             if (err) {
 *                 resultOfCallback.emitReject(err)
 *             }
 *             else {
 *                 resultOfCallback.emitResolve(buf.length)
 *             }
 *         }
 *     })
 *     return await resultOfCallback.promise
 * }
 *
 * run()
 * .then(res => console.log('Successfully read lines:', res))
 * .catch(err => console.log('Error reading lines:', err))
 * //
 * ```
 */
export declare function createDeffered<TResult>(): {
    promise: Promise<TResult>;
    emitResolve: (res: TResult) => void;
    emitReject: (err: any) => void;
    state: () => "fulfilled" | "rejected" | "pending";
};
//# sourceMappingURL=createDeffered.d.ts.map