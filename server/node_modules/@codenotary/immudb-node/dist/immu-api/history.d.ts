/// <reference types="node" />
import type * as igrpc from '@codenotary/immudb-node-grpcjs';
import * as grpcjs from '@grpc/grpc-js';
import { Buffer } from 'node:buffer';
import Long from 'long';
export declare type GetHistoryProps = {
    /**
     * Sort order, default is ascending. To order descending set this field to
     * `true`.
     */
    sortDescending?: boolean;
    /**
     * Key for which scan history.
     */
    key: Buffer;
    /**
     * Start history scan starting with revision id:
     * - `0` - most recent revision
     * - `n` - n-th revision (n's starts from 1),
     * - `-k` - k-th revision before most recent (k's starts from 1).
     */
    startAtRevisionId?: Long;
    /**
     * Limit output to number, no limit if `undefined` (default).
     */
    limit?: number;
    /**
     * Get keys in transactions (database) after specified id.
     *
     * Simulate situation as if database consists of transactions:
     * - from transaction `seenAtTxId`
     * - to most recent transaction.
     */
    seenSinceTxId?: Long;
};
export declare function createScanHistory(client: igrpc.ImmuServiceClient): (props: GetHistoryProps & {
    credentials: grpcjs.CallCredentials;
}) => Promise<{
    valTxEntry: import("../types/TxEntry.js").TxContext & import("../types/Entry.js").ValEntry & import("../types/Indexer.js").IndexerInfo;
    refTxEntry?: (import("../types/TxEntry.js").TxContext & import("../types/Entry.js").RefEntry & import("../types/Indexer.js").IndexerInfo) | undefined;
}[]>;
export declare function createScanHistoryStreaming(client: igrpc.ImmuServiceClient): (props: GetHistoryProps & {
    credentials: grpcjs.CallCredentials;
}) => AsyncGenerator<igrpc.Chunk__Output, any[], unknown>;
//# sourceMappingURL=history.d.ts.map