import * as immuGrpc from '../immu-grpc/index.js';
import * as igt from '../immu-grpc-tx/index.js';
export function createServerInfo(client) {
    const healthGrpc = immuGrpc.unaryCall.createHealth(client);
    return function serverInfo(props) {
        return healthGrpc({
            request: {},
            options: {
                credentials: props.credentials,
            },
        })
            .then(maybeResponse => maybeResponse
            ? maybeResponse
            : Promise.reject('HealthResponse__Output must be defined'));
    };
}
export function createExportTx(client) {
    const exportTxGrpc = immuGrpc.readerCall.createExportTx(client);
    return function exportTx(props) {
        return exportTxGrpc({
            request: {
                tx: props.txId,
            },
            credentials: props.credentials,
        });
    };
}
export function createReplicateTx(client) {
    const replicateTxGrpc = immuGrpc.writerCall.createReplicateTx(client);
    return function replicateTx(props) {
        return replicateTxGrpc({
            request: props.chunks,
            credentials: props.credentials,
        })
            .then(({ res, info }) => res
            ? res
            : Promise.reject('TxHeader__Output must be defined'))
            .then(txGrpc => igt.grpcTxHeaderToTxCore(txGrpc));
    };
}
//# sourceMappingURL=instance.js.map