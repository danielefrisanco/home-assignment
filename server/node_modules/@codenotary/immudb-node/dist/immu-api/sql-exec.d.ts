import type * as igrpc from '@codenotary/immudb-node-grpcjs';
import type * as immu from '../types/index.js';
import * as grpcjs from '@grpc/grpc-js';
export declare type SqlExecProps = {
    /**
     * Operation options.
     */
    options?: {
        /**
         * Do not wait for immudb to update database indexes, setting this
         * value to `true` may cause operation to speed up in exchange for
         * stale database latest keys values.
         *
         * For example geting key value will return key value pointed by
         * indexer. If indexer is not up to date, returned value may be not
         * latest value.
         *
         * Default value is `false`.
         */
        dontWaitForIndexer?: boolean;
    };
    /**
     * Sql statements to execute. (May be multiple, all will be executed inside
     * automatic transaction.)
     */
    sql: string;
    /**
     * sql params
     *
     * ```ts
     *
     * sqlExec({
     *   sql: 'select * from customer where id = :clientId',
     *   params: [
     *     {name: ':clientId', type: 'Int64', value: Long.fromValue(10)},
     *   ]
     * })
     * ```
     */
    params?: immu.SqlNamedValue[];
};
export declare function createSqlExec(client: igrpc.ImmuServiceClient): (props: SqlExecProps & {
    credentials: grpcjs.CallCredentials;
}) => Promise<{
    subTxes: {
        tx: immu.TxCore | undefined;
        firstPK: immu.SqlNamedValue[];
        lastPK: immu.SqlNamedValue[];
        updatedRowsCount: number;
    }[];
    isInTransaction: boolean;
}>;
//# sourceMappingURL=sql-exec.d.ts.map