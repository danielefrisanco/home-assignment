import * as igp from '../immu-grpc-precond/index.js';
import * as immuGrpc from '../immu-grpc/index.js';
import * as igt from '../immu-grpc-tx/index.js';
import Long from 'long';
export function createSetRefEntry(client) {
    const setRefEntryGrpc = immuGrpc.unaryCall.createSetReference(client);
    return function setRefEntry(props) {
        return setRefEntryGrpc({
            request: {
                referencedKey: props.referToKey,
                key: props.key,
                atTx: props.keyTxId,
                boundRef: props.boundRef,
                preconditions: props.preconditions?.map(igp.precondToGrpcPrecond),
                noWait: props.options?.dontWaitForIndexer,
            },
            options: {
                credentials: props.credentials,
            },
        })
            .then(maybeResponse => maybeResponse
            ? maybeResponse
            : Promise.reject('TxHeader__Output  must be defined'))
            .then(grpcTx => {
            const txCore = igt.grpcTxHeaderToTxCore(grpcTx);
            const ref = {
                type: 'ref',
                version: '1',
                id: txCore.id,
                key: props.key,
                referredKey: props.referToKey,
                referredAtTxId: props.keyTxId !== undefined
                    ? props.keyTxId
                    : props.boundRef === true
                        ? txCore.id
                        : Long.UZERO,
            };
            return { ref, txCore };
        });
    };
}
//# sourceMappingURL=set-ref-entry.js.map