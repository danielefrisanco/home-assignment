import * as immuGrpc from '../immu-grpc/index.js';
import * as ige from '../immu-grpc-entry/index.js';
export function createScanHistory(client) {
    const historyGrpc = immuGrpc.unaryCall.createHistory(client);
    return function scanHistory(props) {
        return historyGrpc({
            request: {
                key: props.key,
                desc: props.sortDescending,
                sinceTx: props.seenSinceTxId,
                limit: props.limit,
                offset: props.startAtRevisionId,
            },
            options: {
                credentials: props.credentials,
            }
        })
            .then(maybeResponse => maybeResponse
            ? maybeResponse
            : Promise.reject('Entries__output must be defined'))
            .then(kvs => {
            return kvs.entries.map(ige.grpcEntryToValTxEntryAndRefTxEntry);
        });
    };
}
export function createScanHistoryStreaming(client) {
    const streamScanHistoryGrpc = immuGrpc.readerCall.createStreamHistory(client);
    /**
     * Example usage:
     *
     * ```ts
     *
     * const buffs: Buffer[] = []
     * for await (const chunk of scanHistoryStreaming({key: Buffer.from('some key')})) {
     *     buffs.push(chunk.content)
     * }
     * const history = toKVEntries(Buffer.concat(buffs))
     * console.log(history)
     *
     * ```
     *
     */
    return function scanHistoryStreaming(props) {
        return streamScanHistoryGrpc({
            request: {
                key: props.key,
                desc: props.sortDescending,
                sinceTx: props.seenSinceTxId,
                limit: props.limit,
                offset: props.startAtRevisionId,
            },
            credentials: props.credentials,
        });
    };
}
//# sourceMappingURL=history.js.map