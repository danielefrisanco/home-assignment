import type * as igrpc from '@codenotary/immudb-node-grpcjs';
import type * as immu from '../types/index.js';
import * as grpcjs from '@grpc/grpc-js';
export declare function createListUsers(client: igrpc.ImmuServiceClient): (props: {
    credentials: grpcjs.CallCredentials;
}) => Promise<immu.UserInfo[]>;
export declare type CreateUsersProps = {
    /**
     * Name of new user. Must be unique.
     */
    username: string;
    /**
     * Password of new user. Password must have between 8 and 32 letters,
     * digits and special characters of which at least 1 uppercase letter, 1
     * digit and 1 special character.
     */
    password: string;
    /**
     * New user database name for which she will have permission
     */
    database: string;
    /**
     * Permission given to new user on selected database.
     * New user creator must have permissions for giving permissions
     * on selected database.
     */
    permission: immu.Permission;
};
export declare function createCreateUser(client: igrpc.ImmuServiceClient): (props: CreateUsersProps & {
    credentials: grpcjs.CallCredentials;
}) => Promise<immu.UserCredentials & immu.DatabasePermission>;
export declare type SetUserPasswordProps = {
    /**
     * Name of new user. Must be unique.
     */
    username: string;
    /**
     * Actual password
     */
    password: string;
    /**
     * New password. Must have between 8 and 32 letters, digits and special
     * characters of which at least 1 uppercase letter, 1 digit and 1 special
     * character.
     */
    newPassword: string;
};
export declare function createSetUserPassword(client: igrpc.ImmuServiceClient): (props: SetUserPasswordProps & {
    credentials: grpcjs.CallCredentials;
}) => Promise<string>;
export declare type SetUserActiveProps = {
    /**
     * Name of existing user.
     */
    username: string;
    /**
     * Should user be active?
     */
    active: boolean;
};
export declare function createSetUserActive(client: igrpc.ImmuServiceClient): (props: SetUserActiveProps & {
    credentials: grpcjs.CallCredentials;
}) => Promise<SetUserActiveProps & {
    credentials: grpcjs.CallCredentials;
}>;
export declare type SetUserDbPermissionsProps = {
    /**
     * Name of existing user for whome database permission is to be applied.
     */
    username: string;
    /**
     * Database for with user permission is to be applied.
     */
    database: string;
    /**
     * New permissions for user.
     */
    permission: immu.KnownPermissionName;
    /**
     *
     */
    grantRevoke: 'GRANT' | 'REVOKE';
};
export declare function createSetUserDbPermissions(client: igrpc.ImmuServiceClient): (props: SetUserDbPermissionsProps & {
    credentials: grpcjs.CallCredentials;
}) => Promise<SetUserDbPermissionsProps & {
    credentials: grpcjs.CallCredentials;
}>;
//# sourceMappingURL=user.d.ts.map