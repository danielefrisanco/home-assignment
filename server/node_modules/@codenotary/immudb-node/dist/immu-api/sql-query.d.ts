import type * as igrpc from '@codenotary/immudb-node-grpcjs';
import type * as immu from '../types/index.js';
import * as grpcjs from '@grpc/grpc-js';
export declare type SqlQueryProps = {
    /**
     * Sql statements to execute. (May be multiple, all will be executed inside
     * automatic transaction.)
     */
    sql: string;
    /**
     * sql params
     *
     * ```ts
     *
     * sqlExec({
     *   sql: 'select * from customer where id = :clientId',
     *   params: [
     *     {name: ':clientId', type: 'Int64', value: Long.fromValue(10)},
     *   ]
     * })
     * ```
     */
    params?: immu.SqlNamedValue[];
    /**
     * Does this query operation needs refreshed index
     * or not? (perhaps earlier operation was also read).
     */
    reuseSnapshot?: boolean;
};
export declare function createSqlQuery(client: igrpc.ImmuServiceClient): (props: SqlQueryProps & {
    credentials: grpcjs.CallCredentials;
}) => Promise<immu.SqlNamedValue[][]>;
export declare function createSqlQueryTables(client: igrpc.ImmuServiceClient): (props: {
    credentials: grpcjs.CallCredentials;
}) => Promise<immu.SqlNamedValue[][]>;
export declare type SqlQueryTableProps = {
    /**
     * Sql table to query.
     */
    table: string;
};
export declare function createSqlQueryTable(client: igrpc.ImmuServiceClient): (props: SqlQueryTableProps & {
    credentials: grpcjs.CallCredentials;
}) => Promise<immu.SqlNamedValue[][]>;
//# sourceMappingURL=sql-query.d.ts.map