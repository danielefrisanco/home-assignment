import * as igp from '../immu-grpc-precond/index.js';
import * as igt from '../immu-grpc-tx/index.js';
import * as immuGrpc from '../immu-grpc/index.js';
import * as ike from '../immu-kvm-entry/index.js';
import Long from 'long';
export function createSetEntries(client) {
    const execAllGrpc = immuGrpc.unaryCall.createExecAll(client);
    return function setEntries(props) {
        return execAllGrpc({
            request: {
                Operations: props.ops.map(operationToGrpcOperation),
                preconditions: props.preconditions?.map(igp.precondToGrpcPrecond),
                noWait: props.options?.dontWaitForIndexer,
            },
            options: {
                credentials: props.credentials,
            },
        })
            .then(maybeResponse => maybeResponse
            ? maybeResponse
            : Promise.reject('TxHeader__Output  must be defined'))
            .then(grpcTx => {
            const tx = igt.grpcTxHeaderToTxCore(grpcTx);
            const txEntries = props.ops.map((entry) => operationToVerifiableOperation(entry, tx));
            return { txEntries, tx };
        });
    };
}
function operationToGrpcOperation(op) {
    switch (op.type) {
        case 'val': return {
            operation: 'kv',
            kv: ike.kvmToGrpcKeyValue(op)
        };
        case 'ref': return {
            operation: 'ref',
            ref: {
                referencedKey: op.referToKey,
                key: op.key,
                atTx: op.keyTxId,
                boundRef: op.boundRef,
                noWait: op.options?.dontWaitForIndexer,
                preconditions: op.preconditions?.map(igp.precondToGrpcPrecond),
            }
        };
        case 'zSet': return {
            operation: 'zAdd',
            zAdd: {
                set: op.zSet,
                key: op.referredKey,
                score: op.referredKeyScore,
                atTx: op.referredKeyAtTxId,
                noWait: op.options?.dontWaitForIndexer,
                boundRef: op.boundReferredKeyAtTxId,
            },
        };
    }
}
function operationToVerifiableOperation(op, tx) {
    switch (op.type) {
        case 'val': return {
            type: 'val',
            version: '1',
            meta: op.meta,
            id: tx.id,
            key: op.key,
            val: op.val,
        };
        case 'ref': return {
            type: 'ref',
            version: '1',
            meta: undefined,
            id: tx.id,
            key: op.key,
            referredKey: op.referToKey,
            referredAtTxId: op.keyTxId !== undefined
                ? op.keyTxId
                : op.boundRef === true
                    ? tx.id
                    : Long.UZERO,
        };
        case 'zSet': return {
            type: 'zSet',
            version: '1',
            id: tx.id,
            meta: undefined,
            referredKey: op.referredKey,
            referredAtTxId: op.referredKeyAtTxId ?? Long.UZERO,
            referredKeyScore: op.referredKeyScore,
            zSet: op.zSet,
        };
    }
}
export function createSetEntriesStreaming(client) {
    const streamExecAllGrpc = immuGrpc.writerCall.createStreamExecAll(client);
    /**
     *
     * Example usage:
     *
     * ```ts
     *
     * const tx = setEntriesStreaming({chunks: fromExecEntriesGen([
     *     {
     *          type: 'kv',
     *          entry: {
     *              key: Buffer.from('some key'),
     *              val: Buffer.from('some val'),
     *          },
     *      },
     *     {
     *          type: 'zAdd',
     *          entry: {
     *              set: Buffer.from('my set'),
     *              score: 2,
     *              key: Buffer.from('some key'),
     *          },
     *      },
     * ])})
     *
     * ```
     */
    return function setEntriesStreaming(props) {
        return streamExecAllGrpc({
            request: props.chunks,
            credentials: props.credentials,
        })
            .then(({ res, info }) => res
            ? res
            : Promise.reject('TxHeader__Output must be defined'))
            .then(igt.grpcTxHeaderToTxCore);
    };
}
//# sourceMappingURL=set-val-ref-zSet.js.map