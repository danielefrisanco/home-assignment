import * as immuGrpc from '../immu-grpc/index.js';
import * as ige from '../immu-grpc-entry/index.js';
export function createScanValRefEntries(client) {
    const scanKVEntriesGrpc = immuGrpc.unaryCall.createScan(client);
    return function scanValRefEntries(props) {
        return scanKVEntriesGrpc({
            request: {
                desc: props.sortDescending,
                endKey: props.scanStopAtKey,
                inclusiveEnd: props.includeStopAtKey,
                inclusiveSeek: props.includeSkipToKey,
                limit: props.limit,
                noWait: props.dontWaitForLatestKeys,
                sinceTx: props.seenSinceTxId,
                prefix: props.filterToKeyPrefix,
                seekKey: props.scanSkipToKey,
            },
            options: {
                credentials: props.credentials,
            }
        })
            .then(maybeResponse => maybeResponse
            ? maybeResponse
            : Promise.reject('Entries__output must be defined'))
            .then(kvs => kvs.entries.map(ige.grpcEntryToValTxEntryAndRefTxEntry));
    };
}
export function createScanValRefEntriesStreaming(client) {
    const streamScanGrpc = immuGrpc.readerCall.createStreamScan(client);
    /**
     * Example usage:
     *
     * ```ts
     *
     * const buffs: Buffer[] = []
     * for await (const chunk of scanValRefEntriesStreaming({})) {
     *     buffs.push(chunk.content)
     * }
     * const valRefEntries = toKVEntries(Buffer.concat(buffs))
     * console.log(valRefEntries)
     *
     * ```
     */
    return function scanValRefEntriesStreaming(props) {
        return streamScanGrpc({
            request: {
                desc: props.sortDescending,
                endKey: props.scanStopAtKey,
                inclusiveEnd: props.includeStopAtKey,
                inclusiveSeek: props.includeSkipToKey,
                limit: props.limit,
                noWait: props.dontWaitForLatestKeys,
                sinceTx: props.seenSinceTxId,
                prefix: props.filterToKeyPrefix,
                seekKey: props.scanSkipToKey,
            },
            credentials: props.credentials,
        });
    };
}
//# sourceMappingURL=scan-val-ref-entries.js.map