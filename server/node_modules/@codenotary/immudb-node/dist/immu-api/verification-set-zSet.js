import * as immuGrpc from '../immu-grpc/index.js';
import * as ver from '../immu-grpc-verification/index.js';
import Long from 'long';
export function createSetZSetEntryGetVerification(client) {
    const grpcSetZSetAndGetVerification = immuGrpc.unaryCall.createVerifiableZAdd(client);
    /**
     * Sets key-value pair(s) for given session defined in credentials
     */
    return function setZSetEntryGetVerification(props) {
        return grpcSetZSetAndGetVerification({
            request: {
                zAddRequest: {
                    set: props.zSet,
                    key: props.referredKey,
                    score: props.referredKeyScore,
                    atTx: props.referredKeyAtTxId,
                    noWait: props.options?.dontWaitForIndexer,
                    boundRef: props.boundReferredKeyAtTxId,
                },
                proveSinceTx: props.refTxId,
            },
            options: {
                credentials: props.credentials,
            },
        })
            .then(maybeResponse => maybeResponse
            ? maybeResponse
            : Promise.reject('VerifiableTx__Output must be defined'))
            .then(grpcVerTx => {
            const grpcTx = grpcVerTx.tx;
            const grpcProof = grpcVerTx.dualProof;
            if (grpcTx?.header == undefined) {
                throw 'transaction must be defined';
            }
            if (grpcProof?.sourceTxHeader == undefined) {
                throw 'sourceTxHeader must be defined';
            }
            if (grpcProof?.targetTxHeader == undefined) {
                throw 'targetTxHeader must be defined';
            }
            const grpcTxHeader = grpcTx.header;
            const zSetEntry = {
                type: 'zSet',
                version: '1',
                zSet: props.zSet,
                referredKey: props.referredKey,
                referredKeyScore: props.referredKeyScore,
                referredAtTxId: props.referredKeyAtTxId ?? Long.UZERO
            };
            const verificationEntries = {
                type: 'all-of',
                allEntries: [zSetEntry],
                allEntriesMht: grpcTxHeader.eH,
            };
            const verificationTx = ver.grpcDualProofToVerificationTx({
                grpcProof: grpcProof,
                grpcTx: grpcTxHeader,
                refHash: props.refHash,
                refTxId: props.refTxId,
            });
            const verification = {
                entries: verificationEntries,
                tx: verificationTx
            };
            const transaction = {
                id: verificationTx.tx.id,
                timestamp: verificationTx.tx.timestamp,
                entries: verificationEntries.allEntries,
            };
            return {
                transaction,
                verification,
                zSetEntry,
            };
        });
    };
}
//# sourceMappingURL=verification-set-zSet.js.map