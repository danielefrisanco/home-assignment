import * as igt from '../immu-grpc-tx/index.js';
import * as immuGrpc from '../immu-grpc/index.js';
import Long from 'long';
export function createSetZSetEntry(client) {
    const setZEntryGrpc = immuGrpc.unaryCall.createZAdd(client);
    return function setZEntry(props) {
        return setZEntryGrpc({
            request: {
                set: props.zSet,
                key: props.referredKey,
                score: props.referredKeyScore,
                atTx: props.referredKeyAtTxId,
                noWait: props.options?.dontWaitForIndexer,
                boundRef: props.boundReferredKeyAtTxId,
            },
            options: {
                credentials: props.credentials,
            },
        })
            .then(maybeResponse => maybeResponse
            ? maybeResponse
            : Promise.reject('TxHeader__Output  must be defined'))
            .then(grpcTx => {
            const tx = igt.grpcTxHeaderToTxCore(grpcTx);
            const zSetTxEntry = {
                type: 'zSet',
                version: '1',
                zSet: props.zSet,
                referredKey: props.referredKey,
                referredKeyScore: props.referredKeyScore,
                referredAtTxId: props.referredKeyAtTxId ?? Long.UZERO,
                id: tx.id
            };
            return { zSetTxEntry, tx };
        });
    };
}
//# sourceMappingURL=set-z-entry.js.map