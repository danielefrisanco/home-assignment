import * as immuGrpc from '../immu-grpc/index.js';
import * as ver from '../immu-grpc-verification/index.js';
export function createGetTxAndVerification(client) {
    const verifiableTxByIdGrpc = immuGrpc.unaryCall.createVerifiableTxById(client);
    /**
     *
     */
    return function getTxAndVerification(props) {
        return verifiableTxByIdGrpc({
            request: {
                proveSinceTx: props.refTxId,
                tx: props.txId,
                keepReferencesUnresolved: true,
                sinceTx: props.dbTxesWindow?.startId,
                entriesSpec: {
                    kvEntriesSpec: { action: 'RAW_VALUE' },
                    zEntriesSpec: { action: 'RAW_VALUE' },
                    sqlEntriesSpec: { action: 'RAW_VALUE' },
                },
            },
            options: {
                credentials: props.credentials,
            },
        })
            .then(maybeResponse => maybeResponse
            ? maybeResponse
            : Promise.reject('VerifiableTx__Output must be defined'))
            .then(grpcVerTx => {
            const grpcTx = grpcVerTx.tx;
            const grpcProof = grpcVerTx.dualProof;
            if (grpcTx?.header == undefined) {
                throw 'transaction must be defined';
            }
            if (grpcProof?.sourceTxHeader == undefined) {
                throw 'sourceTxHeader must be defined';
            }
            if (grpcProof?.targetTxHeader == undefined) {
                throw 'targetTxHeader must be defined';
            }
            const grpcTxHeader = grpcTx.header;
            const verificationEntries = ver.grpcTxEntriesToVerificationEntries({
                txEntries: grpcTx.entries,
                allEntriesMht: grpcTxHeader.eH,
            });
            const verificationTx = ver.grpcDualProofToVerificationTx({
                grpcProof: grpcProof,
                grpcTx: grpcTxHeader,
                refHash: props.refHash,
                refTxId: props.refTxId,
            });
            const verification = {
                entries: verificationEntries,
                tx: verificationTx
            };
            const transaction = {
                id: verificationTx.tx.id,
                timestamp: verificationTx.tx.timestamp,
                entries: verificationEntries.allEntries,
            };
            return {
                transaction,
                verification
            };
        });
    };
}
//# sourceMappingURL=verification-get-tx.js.map