import * as ip from '../immu-permission.js';
import * as immuGrpc from '../immu-grpc/index.js';
import { Buffer } from 'node:buffer';
export function createListUsers(client) {
    const sqlQueryGrpc = immuGrpc.unaryCall.createListUsers(client);
    return function sqlQuery(props) {
        return sqlQueryGrpc({
            request: {},
            options: {
                credentials: props.credentials,
            },
        })
            .then(maybeResponse => maybeResponse
            ? maybeResponse
            : Promise.reject('UserList__Output must be defined'))
            .then(grpcUsers => grpcUsers.users.map(grpcUserInfoToUserInfo));
    };
}
/**
 * Transforms User__Output to more friendly object.
 */
function grpcUserInfoToUserInfo(userResponse) {
    return {
        username: userResponse.user.toString(),
        createdBy: userResponse.createdby,
        createdDate: new Date(userResponse.createdat),
        active: userResponse.active,
        permissions: userResponse.permissions.map(grpcPermissionToDatabasePermission)
    };
}
/**
 * Transforms grpc user permissions to more friendly output.
 */
function grpcPermissionToDatabasePermission(p) {
    return {
        database: p.database,
        permission: ip.permissionFromCode(p.permission),
    };
}
export function createCreateUser(client) {
    const createUsersGrpc = immuGrpc.unaryCall.createCreateUsers(client);
    return function createUsers(props) {
        return createUsersGrpc({
            request: {
                database: props.database,
                user: Buffer.from(props.username),
                password: Buffer.from(props.password),
                permission: ip.permissionToCode(props.permission)
            },
            options: {
                credentials: props.credentials,
            },
        })
            .then(maybeResponse => maybeResponse
            ? maybeResponse
            : Promise.reject('Empty__Output must be defined'))
            .then(_ => {
            const res = props;
            return res;
        });
    };
}
export function createSetUserPassword(client) {
    const changePasswordGrpc = immuGrpc.unaryCall.createChangePassword(client);
    return function setUserPassword(props) {
        return changePasswordGrpc({
            request: {
                user: Buffer.from(props.username),
                oldPassword: Buffer.from(props.password),
                newPassword: Buffer.from(props.newPassword),
            },
            options: {
                credentials: props.credentials,
            },
        })
            .then(maybeResponse => maybeResponse
            ? maybeResponse
            : Promise.reject('Empty__Output must be defined'))
            .then(_ => props.username);
    };
}
export function createSetUserActive(client) {
    const setActiveUserGrpc = immuGrpc.unaryCall.createSetActiveUser(client);
    return function setUserActive(props) {
        return setActiveUserGrpc({
            request: {
                username: props.username,
                active: props.active,
            },
            options: {
                credentials: props.credentials,
            },
        })
            .then(maybeResponse => maybeResponse
            ? maybeResponse
            : Promise.reject('Empty__Output must be defined'))
            .then(_ => props);
    };
}
export function createSetUserDbPermissions(client) {
    const changePermissionGrpc = immuGrpc.unaryCall.createChangePermission(client);
    return function setUserDbPermissions(props) {
        return changePermissionGrpc({
            request: {
                action: props.grantRevoke,
                username: props.username,
                database: props.database,
                permission: ip.permissionToCode((props.permission)),
            },
            options: {
                credentials: props.credentials,
            },
        })
            .then(maybeResponse => maybeResponse
            ? maybeResponse
            : Promise.reject('Empty__Output must be defined'))
            .then(_ => props);
    };
}
//# sourceMappingURL=user.js.map