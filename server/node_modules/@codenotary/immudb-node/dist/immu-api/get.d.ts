/// <reference types="node" />
import Long from 'long';
import type * as igrpc from '@codenotary/immudb-node-grpcjs';
import * as grpcjs from '@grpc/grpc-js';
export declare type GetValRefProps = {
    /**
     * Key to look for.
     */
    key: Buffer;
    /**
     * Get key value heaving revision.
     *
     * Each set key operation creates key revision, for the same key:
     * - first set creates revision `1`,
     * - second set creates revision `2`,
     * - and so on.
     *
     * Getting key with revision:
     * - `0` or `undefined` (default) - means most recent revision,
     * - `1`, `2`, ... - means first set key, second set key, ...,
     * - `-1`, `-2`, ... - means one before recent revision, two before recent
     *   revision, ...
     */
    revision?: Long;
    /**
     * Get key in transaction (database) with specified id.
     *
     * Simulate situation as if database consists of transactions:
     * - from transaction 0
     * - to transaction `seenAtTxId`.
     */
    seenAtTxId?: Long;
    /**
     * Get key in transactions (database) after specified id.
     *
     * Simulate situation as if database consists of transactions:
     * - from transaction `seenAtTxId`
     * - to most recent transaction.
     */
    seenSinceTxId?: Long;
    dbTxesWindow?: {
        startId?: Long;
        endId?: Long;
    };
    /**
     * Operation options.
     */
    options?: {
        /**
         * Do not wait for immudb to update database indexes, setting this
         * value to `true` may cause operation to speed up in exchange for
         * stale database latest keys values.
         *
         * For example geting key value will return key value pointed by
         * indexer. If indexer is not up to date, returned value may be not
         * latest value.
         *
         * Default value is `false`.
         */
        dontWaitForIndexer?: boolean;
    };
};
export declare function createGetValRef(client: igrpc.ImmuServiceClient): (props: GetValRefProps & {
    credentials: grpcjs.CallCredentials;
}) => Promise<{
    valTxEntry: import("../types/TxEntry.js").TxContext & import("../types/Entry.js").ValEntry & import("../types/Indexer.js").IndexerInfo;
    refTxEntry?: (import("../types/TxEntry.js").TxContext & import("../types/Entry.js").RefEntry & import("../types/Indexer.js").IndexerInfo) | undefined;
}>;
export declare type GetAllValRefsProps = {
    /**
     * Keys of entries to obtain.
     */
    keys: Buffer[];
    /**
     * Get keys in transactions (database) after specified id.
     *
     * Simulate situation as if database consists of transactions:
     * - from transaction `seenAtTxId`
     * - to most recent transaction.
     */
    seenSinceTxId?: Long;
};
export declare function createGetValRefs(client: igrpc.ImmuServiceClient): (props: GetAllValRefsProps & {
    credentials: grpcjs.CallCredentials;
}) => Promise<{
    valTxEntry: import("../types/TxEntry.js").TxContext & import("../types/Entry.js").ValEntry & import("../types/Indexer.js").IndexerInfo;
    refTxEntry?: (import("../types/TxEntry.js").TxContext & import("../types/Entry.js").RefEntry & import("../types/Indexer.js").IndexerInfo) | undefined;
}[]>;
export declare type GetTxWithEntriesProps = {
    /**
     * Resolve references or not:
     * - `true` - resolve,
     * - `false` or `undefined` - do not resolve.
     */
    resolveRefs?: boolean;
    /**
     * Id of transaction to retrive
     */
    txId?: Long;
    /**
     * Operation options.
     */
    options?: {
        /**
         * Do not wait for immudb to update database indexes, setting this
         * value to `true` may cause operation to speed up in exchange for
         * stale database latest keys values.
         *
         * For example geting key value will return key value pointed by
         * indexer. If indexer is not up to date, returned value may be not
         * latest value.
         *
         * Default value is `false`.
         */
        dontWaitForIndexer?: boolean;
    };
    /**
     * Get keys in transactions (database) after specified id.
     *
     * Simulate situation as if database consists of transactions:
     * - from transaction `seenAtTxId`
     * - to most recent transaction.
     */
    seenSinceTxId?: Long;
    /**
     * Action performed on transaction KVEntries and RefEntries:
     * - `EXCLUDE` - filter out (value?),
     * - `ONLY_DIGEST` (default) - filter to digest of value,
     * - `RAW_VALUE` - just value?,
     * - `RESOLVE` - if KVEntry is RefEntry (special KVEntry heaving as value
     *   referenced key), value will be value of referenced key. ZEntry does
     *   not have value (everything is encoded in key).
     *
     * `ONLY_DIGEST` is default if not specified.
     */
    kvOrRefEntryAction?: 'EXCLUDE' | 'ONLY_DIGEST' | 'RAW_VALUE' | 'RESOLVE';
    /**
     * Action performed on transaction SqlEntries:
     * - `EXCLUDE` - filter out (value?),
     * - `ONLY_DIGEST` (default) - filter to digest of value,
     * - `RAW_VALUE` - just value?
     *
     * `ONLY_DIGEST` is default if not specified.
     */
    sqlEntryAction?: 'EXCLUDE' | 'ONLY_DIGEST' | 'RAW_VALUE';
    /**
     * Action performed on ZEntries:
     * - `EXCLUDE` - filter out (value?),
     * - `ONLY_DIGEST` - filter to digest of value,
     * - `RAW_VALUE` - just value? (ZEntry have empty value, everything is encoded in key),
     * - `RESOLVE` - value will be referenced key value.
     *
     * `ONLY_DIGEST` is default if not specified.
     */
    zEntryAction?: 'EXCLUDE' | 'ONLY_DIGEST' | 'RAW_VALUE' | 'RESOLVE';
};
export declare function createGetTxWithEntries(client: igrpc.ImmuServiceClient): (props: GetTxWithEntriesProps & {
    credentials: grpcjs.CallCredentials;
}) => Promise<igrpc.Tx__Output>;
export declare type GetTxGenericEntriesProps = {
    /**
     * Resolve references or not:
     * - `true` - resolve,
     * - `false` or `undefined` - do not resolve.
     */
    resolveRefs?: boolean;
    /**
     * Id of transaction to retrive
     */
    txId?: Long;
    /**
     * Operation options.
     */
    options?: {
        /**
         * Do not wait for immudb to update database indexes, setting this
         * value to `true` may cause operation to speed up in exchange for
         * stale database latest keys values.
         *
         * For example geting key value will return key value pointed by
         * indexer. If indexer is not up to date, returned value may be not
         * latest value.
         *
         * Default value is `false`.
         */
        dontWaitForIndexer?: boolean;
    };
    /**
     * Get keys in transactions (database) after specified id.
     *
     * Simulate situation as if database consists of transactions:
     * - from transaction `seenAtTxId`
     * - to most recent transaction.
     */
    seenSinceTxId?: Long;
};
export declare function createGetTxGenericEntries(client: igrpc.ImmuServiceClient): (props: GetTxGenericEntriesProps & {
    credentials: grpcjs.CallCredentials;
}) => Promise<import("../types/TxEntry.js").TxEntry[]>;
export declare function createGetValRefStreaming(client: igrpc.ImmuServiceClient): (props: GetValRefProps & {
    credentials: grpcjs.CallCredentials;
}) => AsyncGenerator<igrpc.Chunk__Output, any[], unknown>;
//# sourceMappingURL=get.d.ts.map