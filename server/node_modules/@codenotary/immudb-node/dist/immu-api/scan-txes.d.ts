import type * as igrpc from '@codenotary/immudb-node-grpcjs';
import * as grpcjs from '@grpc/grpc-js';
import Long from 'long';
export declare type ScanTxesProps = {
    /**
     * Sort order, default is ascending. To order descending set this field to
     * `true`.
     */
    sortDescending?: boolean;
    /** If set limits output to set value, no limit if `undefined` (default). */
    limit?: number;
    /**
     * If set includes in output only keys since transaction id.
     *
     * Not set does nothing (default).
     *
     * How this parameter is related to {@link ScanTxesProps.scanStartAtTxId}???
     * => maybe this would influence output if entry was resolved...
     */
    seenSinceTxId?: Long;
    /**
     * If set to `true`, seek does not wait for indexer to be synchronized.
     * This mean that operation may return stale values.
     *
     * Not set does nothing (default).
     */
    dontWaitForLatestKeys?: boolean;
    /**
     * If set operation will start scanning from transaction with specified id,
     * if not set operation will start from first transaction.
     *
     * **Mandatory**.
     */
    scanStartAtTxId: Long;
    /**
     * Action performed on transaction KVEntries and RefEntries:
     * - `EXCLUDE` - filter out (value?),
     * - `ONLY_DIGEST` (default) - filter to digest of value,
     * - `RAW_VALUE` - just value?,
     * - `RESOLVE` - if KVEntry is RefEntry (special KVEntry heaving as value
     *   referenced key), value will be value of referenced key. ZEntry does
     *   not have value (everything is encoded in key).
     *
     * `ONLY_DIGEST` is default if not specified.
     */
    kvOrRefEntryAction?: 'EXCLUDE' | 'ONLY_DIGEST' | 'RAW_VALUE' | 'RESOLVE';
    /**
     * Action performed on transaction SqlEntries:
     * - `EXCLUDE` - filter out (value?),
     * - `ONLY_DIGEST` (default) - filter to digest of value,
     * - `RAW_VALUE` - just value?
     *
     * `ONLY_DIGEST` is default if not specified.
     */
    sqlEntryAction?: 'EXCLUDE' | 'ONLY_DIGEST' | 'RAW_VALUE';
    /**
     * Action performed on ZEntries:
     * - `EXCLUDE` - filter out (value?),
     * - `ONLY_DIGEST` - filter to digest of value,
     * - `RAW_VALUE` - just value? (ZEntry have empty value, everything is encoded in key),
     * - `RESOLVE` - value will be referenced key value.
     *
     * `ONLY_DIGEST` is default if not specified.
     */
    zEntryAction?: 'EXCLUDE' | 'ONLY_DIGEST' | 'RAW_VALUE' | 'RESOLVE';
};
export declare function createScanTxes(client: igrpc.ImmuServiceClient): (props: ScanTxesProps & {
    credentials: grpcjs.CallCredentials;
}) => Promise<igrpc.Tx__Output[]>;
export declare type ScanDBProps = {
    /**
     * Sort order, default is ascending. To order descending set this field to
     * `true`.
     */
    sortDescending?: boolean;
    /** If set limits output to set value, no limit if `undefined` (default). */
    limit?: number;
    /**
     * Get keys in transactions (database) after specified id.
     *
     * Simulate situation as if database consists of transactions:
     * - from transaction `seenAtTxId`
     * - to most recent transaction.
     */
    seenSinceTxId?: Long;
    /**
     * If set to `true`, seek does not wait for indexer to be synchronized.
     * This mean that operation may return stale values.
     *
     * Not set does nothing (default).
     */
    dontWaitForLatestKeys?: boolean;
    /**
     * If set operation will start scanning from transaction with specified id,
     * if not set operation will start from first transaction.
     *
     *
     */
    scanStartAtTxId?: Long;
};
export declare function createScanDb(client: igrpc.ImmuServiceClient): (props: ScanDBProps & {
    credentials: grpcjs.CallCredentials;
}) => Promise<import("../types/TxEntry.js").TxEntry[]>;
//# sourceMappingURL=scan-txes.d.ts.map