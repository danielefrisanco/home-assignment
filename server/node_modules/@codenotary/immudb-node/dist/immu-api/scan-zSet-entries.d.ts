/// <reference types="node" />
import type * as igrpc from '@codenotary/immudb-node-grpcjs';
import * as grpcjs from '@grpc/grpc-js';
import { Buffer } from 'node:buffer';
import Long from 'long';
export declare type ScanZSetEntriesProps = {
    /**
     * Sort order, default is ascending. To order descending set this field to
     * `true`.
     */
    sortDescending?: boolean;
    /**
     * Set to seek.
     */
    set: Buffer;
    /**
     * Include referenced entries heaving score at least `minScore`.
     */
    minScore?: number;
    /**
     * Include zEntries heaving key.
     */
    seekKey?: Buffer;
    /**
     * Wheader to include entries with {@link ScanZSetEntriesProps.minScore}
     * and {@link ScanZSetEntriesProps.maxScore}.
     */
    inclusiveSeek?: boolean;
    /** Limit output to number, no limit if `undefined` (default). */
    limit?: Long;
    /**
     * Include referenced entries heaving score not greater than `maxScore`.
     */
    maxScore?: number;
    /**
     * Include referenced entries heaving score equal to `equalsScore`.
     */
    equalsScore?: number;
    /**
     * Get keys in transactions (database) after specified id.
     *
     * Simulate situation as if database consists of transactions:
     * - from transaction `seenAtTxId`
     * - to most recent transaction.
     */
    seenSinceTxId?: Long;
    /**
     * Get keys in transactions (database) after specified id.
     *
     * Simulate situation as if database consists of transactions:
     * - from first transaction
     * - to transaction with id `seenToTxId`.
     */
    seenToTxId?: Long;
    /**
     * If set to `true`, seek does not wait for indexer to be synchronized.
     * This mean that operation may return stale values.
     *
     * Not set does nothing (default).
     */
    dontWaitForLatestKeys?: boolean;
};
export declare function createScanZEntries(client: igrpc.ImmuServiceClient): (props: ScanZSetEntriesProps & {
    credentials: grpcjs.CallCredentials;
}) => Promise<{
    zSetEntry: import("../types/Entry.js").ZSetEntry;
    valTxEntry: import("../types/TxEntry.js").ValTxEntry;
    refTxEntry?: import("../types/TxEntry.js").RefTxEntry | undefined;
}[]>;
export declare function createScanZEntriesStreaming(client: igrpc.ImmuServiceClient): (props: ScanZSetEntriesProps & {
    credentials: grpcjs.CallCredentials;
}) => AsyncGenerator<igrpc.Chunk__Output, any[], unknown>;
//# sourceMappingURL=scan-zSet-entries.d.ts.map