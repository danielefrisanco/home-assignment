import type * as igrpc from '@codenotary/immudb-node-grpcjs';
import type * as immu from '../types/index.js';
import * as grpcjs from '@grpc/grpc-js';
import { SetRefEntryProps } from './set-ref-entry.js';
import { SetZSetEntryProps } from './set-z-entry.js';
/**
 * Specifies how to set Entry.
 */
export declare type SetEntryProps = {
    /**
     * Operation options.
     */
    options?: {
        /**
         * Do not wait for immudb to update database indexes, setting this
         * value to `true` may cause operation to speed up in exchange for
         * stale database latest keys values.
         *
         * For example geting key value will return key value pointed by
         * indexer. If indexer is not up to date, returned value may be not
         * latest value.
         *
         * Default value is `false`.
         */
        dontWaitForIndexer?: boolean;
    };
    /**
     * All conditions must be fullfilled for all key values.
     */
    preconditions?: immu.ValOrRefKeyPrecondition[];
    /**
     * Operations.
     */
    ops: SetOperation[];
};
export declare type SetOperation = ({
    type: 'val';
} & immu.KeyValMeta) | ({
    type: 'ref';
} & SetRefEntryProps) | ({
    type: 'zSet';
} & SetZSetEntryProps);
export declare function createSetEntries(client: igrpc.ImmuServiceClient): (props: SetEntryProps & {
    credentials: grpcjs.CallCredentials;
}) => Promise<{
    txEntries: (immu.ValTxEntry | immu.RefTxEntry | immu.ZSetTxEntry)[];
    tx: immu.TxCore;
}>;
export declare type SetEntriesStreamingProps = {
    chunks: AsyncIterable<igrpc.Chunk>;
};
export declare function createSetEntriesStreaming(client: igrpc.ImmuServiceClient): (props: SetEntriesStreamingProps & {
    credentials: grpcjs.CallCredentials;
}) => Promise<immu.TxCore>;
//# sourceMappingURL=set-val-ref-zSet.d.ts.map