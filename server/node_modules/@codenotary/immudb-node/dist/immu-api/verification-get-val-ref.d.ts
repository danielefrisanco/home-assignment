/// <reference types="node" />
import type * as igrpc from '@codenotary/immudb-node-grpcjs';
import type * as immu from '../types/index.js';
import * as grpcjs from '@grpc/grpc-js';
import Long from 'long';
export declare type GetValRefAndVerificationProps = {
    refTxId: Long;
    refHash: Buffer;
    dbTxesWindow?: {
        startId?: Long;
        endId?: Long;
    };
    revisionId?: Long;
    key: Buffer;
    /**
     * Operation options.
     */
    options?: {
        /**
         * Do not wait for immudb to update database indexes, setting this
         * value to `true` may cause operation to speed up in exchange for
         * stale database latest keys values.
         *
         * For example geting key value will return key value pointed by
         * indexer. If indexer is not up to date, returned value may be not
         * latest value.
         *
         * Default value is `false`.
         */
        dontWaitForIndexer?: boolean;
    };
};
export declare function createGetValRefAndVerification(client: igrpc.ImmuServiceClient): (props: GetValRefAndVerificationProps & {
    credentials: grpcjs.CallCredentials;
}) => Promise<{
    transaction: immu.Transaction;
    valEntry: immu.TxContext & immu.ValEntry & immu.IndexerInfo;
    refEntry: (immu.TxContext & immu.RefEntry & immu.IndexerInfo) | undefined;
    verification: immu.Verification;
}>;
//# sourceMappingURL=verification-get-val-ref.d.ts.map