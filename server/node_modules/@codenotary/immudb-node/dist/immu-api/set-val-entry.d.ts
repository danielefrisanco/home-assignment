import type * as igrpc from '@codenotary/immudb-node-grpcjs';
import type * as immu from '../types/index.js';
import * as grpcjs from '@grpc/grpc-js';
export declare type SetValEntryProps = {
    /**
     * Array of key value pairs to set.
     */
    kvms: immu.KeyValMeta[];
    /**
     * All conditions must be fullfilled for all key values.
     */
    preconditions?: immu.ValOrRefKeyPrecondition[];
    /**
     * Operation options.
     */
    options?: {
        /**
         * Do not wait for immudb to update database indexes, setting this
         * value to `true` may cause operation to speed up in exchange for
         * stale database latest keys values.
         *
         * For example geting key value will return key value pointed by
         * indexer. If indexer is not up to date, returned value may be not
         * latest value.
         *
         * Default value is `false`.
         */
        dontWaitForIndexer?: boolean;
    };
};
export declare function createSetValEntries(client: igrpc.ImmuServiceClient): (props: SetValEntryProps & {
    credentials: grpcjs.CallCredentials;
}) => Promise<{
    valEntries: immu.ValTxEntry[];
    txCore: immu.TxCore;
}>;
export declare type SetValEntriesStreamingProps = {
    chunks: AsyncIterable<igrpc.Chunk>;
};
export declare function createSetValEntriesStreaming(client: igrpc.ImmuServiceClient): (props: SetValEntriesStreamingProps & {
    credentials: grpcjs.CallCredentials;
}) => Promise<immu.TxCore>;
//# sourceMappingURL=set-val-entry.d.ts.map