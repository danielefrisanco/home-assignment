import * as immuGrpc from '../immu-grpc/index.js';
import * as igt from '../immu-grpc-tx/index.js';
import * as igs from '../immu-grpc-sql/index.js';
export function createSqlExec(client) {
    // const sqlExecGrpc = immuGrpc.unaryCall.createTxSqlExec(client)
    const sqlExecGrpc = immuGrpc.unaryCall.createSqlExec(client);
    return function sqlExec(props) {
        return sqlExecGrpc({
            request: {
                sql: props.sql,
                params: props.params?.map(igs.sqlNamedValueToGrpcSqlNamedParam),
                noWait: props.options?.dontWaitForIndexer,
            },
            options: {
                credentials: props.credentials,
            },
        })
            .then(maybeResponse => maybeResponse
            ? maybeResponse
            : Promise.reject('SQLExecResult__Output must be defined'))
            .then(grpcSqlExecResults => {
            const isInTransaction = grpcSqlExecResults.ongoingTx;
            const subTxes = grpcSqlExecResults.txs.map(grpcCommitedSqlTx => {
                // execution may not cause effects!!!
                const tx = grpcCommitedSqlTx.header == undefined
                    ? undefined
                    : igt.grpcTxHeaderToTxCore(grpcCommitedSqlTx.header);
                const updatedRowsCount = grpcCommitedSqlTx.updatedRows;
                const firstPK = igs.grpcSqlObjectNamedValueToNamedValues(grpcCommitedSqlTx.firstInsertedPKs);
                const lastPK = igs.grpcSqlObjectNamedValueToNamedValues(grpcCommitedSqlTx.lastInsertedPKs);
                return {
                    tx,
                    firstPK,
                    lastPK,
                    updatedRowsCount,
                };
            });
            return {
                subTxes,
                isInTransaction,
            };
        });
    };
}
//# sourceMappingURL=sql-exec.js.map