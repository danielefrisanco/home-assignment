import * as immuGrpc from '../immu-grpc/index.js';
import * as ige from '../immu-grpc-entry/index.js';
export function createScanZEntries(client) {
    const zScanGrpc = immuGrpc.unaryCall.createZScan(client);
    return function scanZSetEntries(props) {
        return zScanGrpc({
            request: {
                set: props.set,
                minScore: props.minScore ? { score: props.minScore } : undefined,
                maxScore: props.maxScore ? { score: props.maxScore } : undefined,
                seekScore: props.equalsScore,
                seekAtTx: props.seenToTxId,
                desc: props.sortDescending,
                inclusiveSeek: props.inclusiveSeek,
                limit: props.limit,
                noWait: props.dontWaitForLatestKeys,
                sinceTx: props.seenSinceTxId,
                seekKey: props.seekKey,
            },
            options: {
                credentials: props.credentials,
            }
        })
            .then(maybeResponse => maybeResponse
            ? maybeResponse
            : Promise.reject('Entries__output must be defined'))
            .then(zEntries => zEntries.entries.map(ige.grpcZEntryToZSetEntryAndValTxEntryAndRefTxEntry));
    };
}
export function createScanZEntriesStreaming(client) {
    const streamScanZGrpc = immuGrpc.readerCall.createStreamZScan(client);
    /**
     * Example usage:
     *
     * ```ts
     *
     * const buffs: Buffer[] = []
     * for await (const chunk of scanZEntriesStreaming({})) {
     *     buffs.push(chunk.content)
     * }
     * const zEntries = toZEntries(Buffer.concat(buffs))
     * console.log(zEntries)
     *
     * ```
     *
     */
    return function scanZEntriesStreaming(props) {
        return streamScanZGrpc({
            request: {
                set: props.set,
                minScore: props.minScore ? { score: props.minScore } : undefined,
                maxScore: props.maxScore ? { score: props.maxScore } : undefined,
                seekScore: props.equalsScore,
                seekAtTx: props.seenToTxId,
                desc: props.sortDescending,
                inclusiveSeek: props.inclusiveSeek,
                limit: props.limit,
                noWait: props.dontWaitForLatestKeys,
                sinceTx: props.seenSinceTxId,
                seekKey: props.seekKey,
            },
            credentials: props.credentials,
        });
    };
}
//# sourceMappingURL=scan-zSet-entries.js.map