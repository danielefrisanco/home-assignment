/// <reference types="node" />
import type * as immu from '../types/index.js';
import * as grpcjs from '@grpc/grpc-js';
import type * as igrpc from '@codenotary/immudb-node-grpcjs';
export declare type CreateDatabaseProps = {
    /**
     * Name of immudb instance database
     */
    database: string;
    /**
     * Database settings
     */
    settings: immu.DatabaseSettingsUpdatable;
    /**
     * What to do when database exists?
     * * silently ignore --> set this value to true
     * * (default) throw exception --> set this value to false or undefined
     */
    ifNotExists?: boolean;
};
export declare function createCreateDb(client: igrpc.ImmuServiceClient): (props: CreateDatabaseProps & {
    credentials: grpcjs.CallCredentials;
}) => Promise<{
    database: string;
    alreadyExisted: boolean;
    settings: immu.DatabaseSettings;
}>;
export declare type DeleteDatabaseProps = {
    /**
     * Name of immudb instance database
     */
    database: string;
};
export declare function createDeleteDb(client: igrpc.ImmuServiceClient): (props: DeleteDatabaseProps & {
    credentials: grpcjs.CallCredentials;
}) => Promise<string>;
export declare type FlushDatabaseIndexProps = {
    /**
     * Indicates how much space will be scanned for unreferenced data.
     * Value must be between 0 and 1.
     *
     * Even though this operation blocks transaction processing, choosing a
     * small percentage e.g. 0.1 may not significantly hinder normal operations
     * while reducing used storage space.
     *
     * Partially compaction may be triggered automatically by immudb. Database
     * settings can be modified to set the cleanupPercentage attribute to
     * non-zero in order to accomplish this.
     */
    cleanupPercentage: number;
    /**
     * Should run fsync after writing data?
     * * true --> run fsync after writing data to avoid index regeneration in
     *   the case of an unexpected crash
     * * false | undefined -->  do not run fsync after writing data
     */
    synced: boolean;
};
export declare function createFlushDbIndex(client: igrpc.ImmuServiceClient): (props: FlushDatabaseIndexProps & {
    credentials: grpcjs.CallCredentials;
}) => Promise<string>;
export declare function createCompactDbIndex(client: igrpc.ImmuServiceClient): (props: {
    credentials: grpcjs.CallCredentials;
}) => Promise<void>;
export declare function createGetDbSettings(client: igrpc.ImmuServiceClient): (props: {
    credentials: grpcjs.CallCredentials;
}) => Promise<{
    database: string;
    settings: immu.DatabaseSettings;
}>;
export declare function createListDbs(client: igrpc.ImmuServiceClient): (props: {
    credentials: grpcjs.CallCredentials;
}) => Promise<immu.DBRuntimeInfo[]>;
export declare type LoadDbProps = {
    /**
     * Name of immudb instance database
     */
    database: string;
};
export declare function createLoadDb(client: igrpc.ImmuServiceClient): (props: LoadDbProps & {
    credentials: grpcjs.CallCredentials;
}) => Promise<string>;
export declare type UnloadDbProps = {
    /**
     * Name of immudb instance database
     */
    database: string;
};
export declare function createUnloadDb(client: igrpc.ImmuServiceClient): (props: UnloadDbProps & {
    credentials: grpcjs.CallCredentials;
}) => Promise<void>;
export declare type SetDbSettingsProps = {
    /**
     * Name of immudb instance database
     */
    database: string;
    /**
     * Database settings
     */
    settings: immu.DatabaseSettingsUpdatable;
};
export declare function createSetDbSettings(client: igrpc.ImmuServiceClient): (props: SetDbSettingsProps & {
    credentials: grpcjs.CallCredentials;
}) => Promise<{
    database: string;
    settings: immu.DatabaseSettings;
}>;
export declare function createGetDbCurrentState(client: igrpc.ImmuServiceClient): (props: {
    credentials: grpcjs.CallCredentials;
}) => Promise<{
    database: string;
    txHash: Buffer;
    txId: import("long");
    signature: igrpc.Signature__Output | undefined;
}>;
//# sourceMappingURL=db.d.ts.map