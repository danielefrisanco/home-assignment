/// <reference types="node" />
import type * as igrpc from '@codenotary/immudb-node-grpcjs';
import { Buffer } from 'node:buffer';
import Long from 'long';
import * as grpcjs from '@grpc/grpc-js';
export declare type ScanValRefEntriesProps = {
    /**
     * Sort order, default is ascending. To order descending set this field to
     * `true`.
     */
    sortDescending?: boolean;
    /**
     * Stop scanning before (if {@link ScanValRefEntriesProps.includeStopAtKey} not
     * set or `false`) or at key (if {@link ScanValRefEntriesProps.includeStopAtKey}
     * set to `true`).
     *
     * If undefined, scan to end (default).
     */
    scanStopAtKey?: Buffer;
    /**
     * Include {@link scanStopAtKey} in scan if set to `true`,
     * don't include otherwise.
     */
    includeStopAtKey?: boolean;
    /**
     * Scan will not output entries until specified key.
     */
    scanSkipToKey?: Buffer;
    /**
     * Wheader include {@link ScanValRefEntriesProps.scanSkipToKey} in output. Key
     * will be included if fild set to `true`, otherwise it will not be
     * included.
     */
    includeSkipToKey?: boolean;
    /** Limit output to number, no limit if `undefined` (default). */
    limit?: Long;
    /**
     * If set outputs only keys starting with specified prefix.
     * Not set does nothing (default).
     * */
    filterToKeyPrefix?: Buffer;
    /**
     * Get keys in transactions (database) after specified id.
     *
     * Simulate situation as if database consists of transactions:
     * - from transaction `seenAtTxId`
     * - to most recent transaction.
     */
    seenSinceTxId?: Long;
    /**
     * If set to `true`, seek does not wait for indexer to be synchronized.
     * This mean that operation may return stale values.
     *
     * Not set does nothing (default).
     */
    dontWaitForLatestKeys?: boolean;
};
export declare function createScanValRefEntries(client: igrpc.ImmuServiceClient): (props: ScanValRefEntriesProps & {
    credentials: grpcjs.CallCredentials;
}) => Promise<{
    valTxEntry: import("../types/TxEntry.js").TxContext & import("../types/Entry.js").ValEntry & import("../types/Indexer.js").IndexerInfo;
    refTxEntry?: (import("../types/TxEntry.js").TxContext & import("../types/Entry.js").RefEntry & import("../types/Indexer.js").IndexerInfo) | undefined;
}[]>;
export declare function createScanValRefEntriesStreaming(client: igrpc.ImmuServiceClient): (props: ScanValRefEntriesProps & {
    credentials: grpcjs.CallCredentials;
}) => AsyncGenerator<igrpc.Chunk__Output, any[], unknown>;
//# sourceMappingURL=scan-val-ref-entries.d.ts.map