import * as pb from '@codenotary/immudb-node-pbjs';
import { fromKVEntry } from './kvEntry.js';
import * as buffer from '../buffer.js';
export function fromExecEntryType(type) {
    switch (type) {
        case 'kv': return 1; //1 << 0 // === 1
        case 'zAdd': return 2; // 1 << 1 // === 2
        // case 'ref': return 1 << 2 // === 4
    }
}
export function fromExecEntries(entries) {
    return entries.map(fromExecEntry);
}
export async function* fromExecEntriesGen(entries) {
    // console.log('fromExecEntriesGen')
    for (const entry of entries) {
        const entryBin = fromExecEntry(entry);
        console.log(entryBin);
        yield {
            content: entryBin
        };
    }
}
export function fromExecEntry(entry) {
    switch (entry.type) {
        case 'kv': return Buffer.concat([
            buffer.fromUInt64BEAsNumber(1),
            Buffer.of(fromExecEntryType(entry.type)),
            fromKVEntry(entry.entry),
        ]);
        case 'zAdd': {
            const zAddReqBuf = Buffer.from(pb.immudb.schema.ZAddRequest.encode(entry.entry).finish());
            return Buffer.concat([
                buffer.fromUInt64BEAsNumber(1),
                Buffer.of(fromExecEntryType(entry.type)),
                buffer.fromUInt64BEAsNumber(zAddReqBuf.byteLength),
                zAddReqBuf,
            ]);
        }
    }
}
//# sourceMappingURL=execEntry.js.map