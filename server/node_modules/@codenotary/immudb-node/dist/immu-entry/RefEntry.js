import * as buffer from '../buffer.js';
import { Buffer } from 'node:buffer';
import { PrefixKeyRef, PrefixValRef } from '../immu-hash/consts.js';
export function binEntryToRefEntry(props) {
    const decoded = decodeBinEntryValAsRefEntryPart(props.prefixedVal);
    return {
        type: 'ref',
        version: '1',
        meta: props.meta,
        key: binEntryKeyToRefEntryKey(props.prefixedKey),
        referredKey: decoded.refKey,
        referredAtTxId: decoded.refKeySeenFromTxId,
    };
}
export function refEntryToBinEntry(props) {
    return {
        type: 'bin',
        version: '1',
        meta: props.meta,
        prefixedKey: Buffer.concat([
            PrefixKeyRef,
            props.key
        ]),
        prefixedVal: Buffer.concat([
            PrefixValRef,
            props.referredKey,
            Buffer.from(props.referredAtTxId.toBytesBE())
        ])
    };
}
export function refEntryToLeafEntryPrefixedKey(props) {
    return Buffer.concat([PrefixKeyRef, props.key]);
}
export function binEntryKeyToRefEntryKey(keyBytes, offset) {
    let index = offset ?? 0;
    const keyPrefix = keyBytes[index];
    index += 1;
    const key = keyBytes.subarray(index);
    return key;
}
export function decodeBinEntryValAsRefEntryPart(valBytes, offset) {
    let index = offset ?? 0;
    const refPrefix = valBytes[index];
    index += 1;
    const refKeySeenFromTxId = buffer.toUInt64BE(valBytes, index);
    index += 8;
    const keyPrefix = valBytes[index];
    index += 1;
    const refKey = valBytes.subarray(index);
    return {
        refKey,
        refKeySeenFromTxId,
    };
}
//# sourceMappingURL=RefEntry.js.map