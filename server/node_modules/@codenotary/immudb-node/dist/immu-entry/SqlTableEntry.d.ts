/// <reference types="node" />
import { Buffer } from 'node:buffer';
import type * as immu from '../types/index.js';
export declare function binEntryToSqlTableEntry(props: immu.BinEntry): immu.SqlTableEntry;
export declare function sqlTableEntryToBinEntry(props: immu.SqlTableEntry): immu.BinEntry;
/**
 * Checks if first bits of {@link Buffer} are in form:
 * - first byte `0x02`
 * - following bytes `Buffer.from('CTL.TABLE.')`
 *
 * Meaning {@link Buffer} is index.
 */
export declare function isBinEntryKeySqlTableEntryPart(b: Buffer): boolean;
/**
 * Decodes {@link Buffer} to sql index structure header from:
 * - prefix: first byte `0x02`
 * - tag: bytes `Buffer.from('CTL.TABLE.')`
 * - dbId: UInt32BE,
 * - tableId: UInt32BE,
 *
 */
export declare function binEntryPrefixedKeyToSqlTableEntryPart(b: Buffer): {
    prefix: number;
    tag: string;
    dbId: number;
    tableId: number;
};
export declare function sqlTableEntryToLeafEntryPrefixedKey(entry: immu.SqlTableEntry): Buffer;
/**
 * Decodes {@link Buffer} to sql index structure value from:
 * - columnId: first byte
 * - isAscDesc: bytes (boolean),
 *
 */
export declare function binEntryPrefixedValToSqlTableEntryName(b: Buffer): string;
export declare function sqlTableEntryToBinEntryPrefixedVal(props: immu.SqlTableEntry): Buffer;
//# sourceMappingURL=SqlTableEntry.d.ts.map