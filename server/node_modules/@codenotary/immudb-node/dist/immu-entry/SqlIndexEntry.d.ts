/// <reference types="node" />
import { Buffer } from 'node:buffer';
import type * as immu from '../types/index.js';
export declare function binEntryToSqlIndexEntry(props: immu.BinEntry): immu.SqlIndexEntry;
export declare function sqlIndexEntryToBinEntry(props: immu.SqlIndexEntry): immu.BinEntry;
/**
 * Checks if first bits of {@link Buffer} are in form:
 * - first byte `0x02`
 * - following bytes `Buffer.from('CTL.INDEX.')`
 *
 * Meaning {@link Buffer} is index.
 */
export declare function isBinEntryKeySqlIndexEntryPart(b: Buffer): boolean;
/**
 * Decodes {@link Buffer} to sql index structure header from:
 * - prefix: first byte `0x02`
 * - tag: bytes `Buffer.from('CTL.INDEX.')`
 * - dbId: UInt32BE,
 * - tableId: UInt32BE,
 * - indexId: UInt32BE,
 *
 */
export declare function binEntryPrefixedKeyToSqlIndexEntryPart(b: Buffer): {
    prefix: number;
    tag: string;
    dbId: number;
    tableId: number;
    indexId: number;
};
export declare function sqlIndexEntryToLeafEntryPrefixedKey(entry: immu.SqlIndexEntry): Buffer;
/**
 * Decodes {@link Buffer} to sql index structure value from:
 * - columnId: first byte
 * - isAscDesc: bytes (boolean),
 *
 */
export declare function binEntryPrefixedValToSqlIndexEntryPart(b: Buffer): {
    indexIsPrimary: number;
    columns: immu.SqlIndexColumn[];
};
export declare function sqlIndexEntryToBinEntryPrefixedVal(props: immu.SqlIndexEntry): Buffer;
//# sourceMappingURL=SqlIndexEntry.d.ts.map