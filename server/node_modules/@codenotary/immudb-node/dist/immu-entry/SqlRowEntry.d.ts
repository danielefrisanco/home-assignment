/// <reference types="node" />
import { Buffer } from 'node:buffer';
import type * as immu from '../types/index.js';
export declare function binEntryToSqlRowEntry(props: immu.BinEntry): immu.SqlRowEntry;
export declare function sqlRowEntryToSqlBinEntry(props: immu.SqlRowEntry): immu.BinEntry;
/**
 * Checks if first bits of {@link Buffer} are in form:
 * - first byte `0x02`
 * - following bytes `Buffer.from('R.')`
 *
 * Meaning {@link Buffer} is sql table row.
 */
export declare function isBinEntryKeySqlRowEntryPart(b: Buffer): boolean;
/**
 * Decodes {@link Buffer} to sql table row structure header from:
 * - prefix: first byte `0x02`
 * - tag: bytes `Buffer.from('R.')`
 * - dbId: UInt32BE,
 * - tableId: UInt32BE,
 * - zero: UInt32BE,
 * - isPKNullable: byte (boolean):
 *   - `0x80` is not nullable
 *   - ?
 * - pk: Bytes
 */
export declare function decodeBinEntryKeyToSqlRowEntryPart(b: Buffer): {
    prefix: number;
    tag: Buffer;
    dbId: number;
    tableId: number;
    zero: number;
    pk: Buffer;
};
export declare function sqlRowEntryToLeafEntryPrefixedKey(entry: immu.SqlRowEntry): Buffer;
/**
 * Decodes {@link Buffer} to sql table row structure value from:
 * - numberOfColumns: UInt64BE,
 * - column value definitions:
 *   - columnId: UInt32BE,
 *   - columnByteLength: UInt32BE,
 *   - columnValue: bytes of length columnByteLength
 */
export declare function decodeValueSqlRow(b: Buffer): {
    columnsCount: number;
    columnsValues: (immu.SqlRowColumn & {
        binLength: number;
    })[];
};
/**
 * Decodes {@link Buffer} to sql table row column structure value from:
 * - columnId: UInt32BE,
 * - columnByteLength: UInt32BE,
 * - columnValue: bytes of length columnByteLength.
 *
 * Returns decoded row column value and rest of buffer.
 */
export declare function decodeSqlRowColumnValue(b: Buffer): {
    rowColumn: immu.SqlRowColumn & {
        binLength: number;
    };
    rest: Buffer;
};
/**
 * Decodes {@link Buffer} to sql table row columns values from:
 * - column value definitions:
 *   - columnId: UInt32BE,
 *   - columnByteLength: UInt32BE,
 *   - columnValue: bytes of length columnByteLength
 *
 */
export declare function decodeSqlRowColumnsValues(b: Buffer): (immu.SqlRowColumn & {
    binLength: number;
})[];
export declare function encodeValueSqlRow(props: immu.SqlRowColumn[]): Buffer;
//# sourceMappingURL=SqlRowEntry.d.ts.map