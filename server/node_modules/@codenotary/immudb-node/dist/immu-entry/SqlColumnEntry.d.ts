/// <reference types="node" />
import { Buffer } from 'node:buffer';
import type * as immu from '../types/index.js';
export declare function binEntryToSqlColumnEntry(props: immu.BinEntry): immu.SqlColumnEntry;
export declare function sqlColumnEntryToBinEntry(props: immu.SqlColumnEntry): immu.BinEntry;
export declare function sqlColumnEntryToLeafEntryPrefixedKey(props: immu.SqlColumnEntry): Buffer;
export declare function sqlColumnEntryToLeafEntryPrefixedVal(props: immu.SqlColumnEntry): Buffer;
/**
 * Checks if first bits of {@link Buffer} are in form:
 * - first byte `0x02`
 * - following bytes `Buffer.from('CTL.COLUMN.')`
 *
 * Meaning {@link Buffer} is sql column.
 */
export declare function isBinEntryKeySqlColumnEntryPart(b: Buffer): boolean;
/**
 * Decodes {@link Buffer} to sql column structure header from:
 * - prefix: first byte `0x02`
 * - tag: bytes `Buffer.from('CTL.COLUMN.')`
 * - dbId: UInt32BE,
 * - tableId: UInt32BE,
 * - columnTypeLength: UInt32BE,
 * - columnType: utf8 encoded string,
 *
 */
export declare function binEntryPrefixedKeyToSqlColumnEntryPart(b: Buffer): {
    prefix: number;
    tag: string;
    dbId: number;
    tableId: number;
    columnId: number;
    columnType: string;
};
/**
 * Decodes {@link Buffer} to sql column structure value from:
 * - columnAttribute: first byte
 * - columnMaxLength: UInt32BE,
 * - columnName: utf8 encoded string,
 */
export declare function binEntryPrefixedValToSqlColumnEntryPart(b: Buffer): {
    columnAttribute: number;
    columnMaxLength: number;
    columnName: string;
};
//# sourceMappingURL=SqlColumnEntry.d.ts.map