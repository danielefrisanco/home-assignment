import type * as immu from './types/index.js';
export declare function permissionToKnownIfPossible(permission: immu.KnownPermissionName): immu.Permission;
export declare function permissionFromCode(code: number): immu.Permission;
export declare function permissionToCode(permission: immu.Permission): immu.PermissionCode;
/**
 * Permission names to codes.
 */
export declare const knownPermissionNameToCode: {
    /**
     * No permissions
     */
    readonly None: 0;
    /**
     *Permission to read database
     */
    readonly Read: 1;
    /**
     * Permission to read and write database
     */
    readonly ReadWrite: 2;
    /**
     * Permission to read, write and administer database
     */
    readonly Admin: 254;
    /**
     * Permission to read, write and administer all databases
     */
    readonly SysAdmin: 255;
};
/**
 * Inverts const maps, e.g.
 *
 * @example
 * Invert<{None: 0, Sth: 1} as const>
 * // -> {1: 'None', 2: 'Sth'} as const
 */
export declare type Invert<T extends Record<PropertyKey, PropertyKey>> = {
    [P in keyof T as T[P]]: P;
};
export declare const knownPermissionCodeToName: Invert<typeof knownPermissionNameToCode>;
//# sourceMappingURL=immu-permission.d.ts.map